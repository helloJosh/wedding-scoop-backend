name: Java CI/CD with Maven and Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Images
        run: |
          services=("auth" "scoop")
          for service in "${services[@]}"; do
            echo "Building and pushing Docker image for $service"
            if [ -f "./$service/docker/Dockerfile" ]; then
              mv ./${service}/target ./$service/docker
              docker buildx build --push \
                --tag ${{ secrets.DOCKER_USERNAME }}/${service}-api:latest \
                -f ./$service/docker/Dockerfile \
                ./$service/docker
            else
              echo "Dockerfile not found for $service. Skipping..."
            fi
          done

      - name: Deploy to Remote Server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
                  # 기존 auth-api 컨테이너 중지 및 삭제
                  sudo docker stop auth-api || true
                  sudo docker rm auth-api || true
                  
                  # 최신 Docker 이미지 가져오기
                  sudo docker pull ${{ secrets.DOCKER_USERNAME }}/auth-api
                  
                  # 새 auth-api 컨테이너 실행
                  sudo docker run -d --name auth-api \
                  -p 8080:8080 \
                  --restart always \
                  ${{ secrets.DOCKER_USERNAME }}/auth-api
                  
                  # 기존 scoop-api 컨테이너 중지 및 삭제
                  sudo docker stop scoop-api || true
                  sudo docker rm scoop-api || true
                  
                  # 최신 Docker 이미지 가져오기
                  sudo docker pull ${{ secrets.DOCKER_USERNAME }}/scoop-api
                  
                  # 새 scoop-api 컨테이너 실행
                  sudo docker run -d --name scoop-api \
                  -p 30305:30305 \
                  --restart always \
                  ${{ secrets.DOCKER_USERNAME }}/scoop-api

